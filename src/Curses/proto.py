from __future__ import annotations

import contextlib
import curses
from typing import Iterator
from typing import Protocol


class StatusProto(Protocol):
    def writeln(self, header: str, body: str | None = None) -> None: ...
    def error(self, header: str, body: str | None = None) -> None: ...
    def success(self, header: str, body: str | None = None) -> None: ...
    def attention(self, header: str, body: str | None = None) -> None: ...
    def clear(self) -> None: ...


class ScreenBufferProto(Protocol):
    win: curses._CursesWindow
    @contextlib.contextmanager
    def extra_margin(self, n: int) -> Iterator[None]: ...
    def draw(self) -> None: ...
    def resize(self) -> None: ...
